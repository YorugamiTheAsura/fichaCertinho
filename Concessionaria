package entidades;

import entidades.Veiculos;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Concessionaria {
     //lista que representa a CONCESSIONARIA
	List<Veiculos> veiculos = new ArrayList<>();

	
	//getters e setters
	
	public Concessionaria(List<Veiculos> veiculos) {
		this.veiculos = veiculos;
	}

	public List<Veiculos> getVeiculos() {
		return veiculos;
	}

	public void setVeiculos(List<Veiculos> veiculos) {
		this.veiculos = veiculos;
	}

	public void addVeiculo(Veiculos veiculo) {
		veiculos.add(veiculo);
	}

	public void removeVeiculo(Veiculos veiculo) {
		veiculos.remove(veiculo);
	}

	

	
	
	public void ImprimirVeiculos() {
		
		for (Veiculos x : veiculos) {
			
			System.out.println(x);
            
		}
		
		
	}
	
	public void ListarVeiculosSeparados() {
		veiculos.sort((v1, v2) -> {
			
		    if (v1 instanceof Carro && v2 instanceof Moto) {
		        return -1; // Indica que v1 (Carro) deve vir antes de v2 (Moto)
		    } else if (v1 instanceof Moto && v2 instanceof Carro) {
		        return 1; // Indica que v1 (Moto) deve vir depois de v2 (Carro)
		    }
		    return 0; // Indica que a ordem não deve mudar
		    
		});
		
		ImprimirVeiculos();
		
	}
	
	
	
	//Organiza a lista pela placa
	
	public void ListarVeiculosPlaca(ArrayList<Veiculos> veiculos) {
                        //compara os elementos na lista(placa) e verifica se deve ou não mudar a ordem
		Collections.sort(veiculos, Comparator.comparing(Veiculos::getPlaca));

		for (Veiculos x : veiculos) {

			System.out.println(x);

		}

	}
	
	
	//busca o veiculo pela placa digitada
	public  Veiculos buscarVeiculoPorPlaca( String placa) {
        for (Veiculos veiculo : veiculos) {
        	     //se a placa do veiculo atual analisado é igual a digitada, retorna o veiculo em que tem essa placa 
            if (veiculo.getPlaca().equalsIgnoreCase(placa)) {
                return veiculo;
            }
        }
        return null;
    }
}


